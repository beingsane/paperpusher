{"name":"Paperpusher","tagline":"A jQuery Plugin that takes a JSON object and gives you a Bootstrap compatible HTML form.","body":"Paperpusher\r\n===========\r\n\r\nA jQuery Plugin that takes a JSON object and gives you a Bootstrap compatible HTML form.\r\n\r\n## Dependencies\r\nWhile Paperpusher will work without Bootstrap, it creates a bootstrap-flavoured form for a reason. If you're not using Bootstrap in your project, the markup will be easy to style, and you could always go look at what Bootstrap are doing to their classes if you want to replicate any of it. (*see more at [Bootstrap](http://getbootstrap.com/)*)\r\n\r\nPaperpusher is a jQuery plugin, and thus depends on jQuery being loaded before you load in the paperpusher.js file.\r\n\r\n## Installation\r\nYou can download just the paperpusher.min.js file and include it after jQuery in your project for the minimal installation.\r\n\r\nTo install via Bower:\r\n````\r\nbower install paperpusher\r\n````\r\n\r\n## Usage\r\nBefore using Paperpusher in your project, include jQuery and paperpusher.js (or minified).\r\n\r\nMake yourself a container. This can be a form object, or just a div if you're not wanting to do traditional HTML submissions.\r\n\r\n```` html\r\n<form id='formid' role='form' action='submit.html' method='post'>\r\n</form>\r\n````\r\n\r\nThen you want to define your elements in Javascript. Each element is an input in your form. Here's an example, but see the Documentation section for all the options.\r\n\r\n```` javascript\r\nvar elements = [\r\n\t{\r\n    \ttype: 'text',\r\n        name: 'fullname',\r\n        label: 'Full Name',\r\n        placeholder: 'e.g. Frank Black',\r\n        help: 'Please put your full name',\r\n        required: true\r\n    },\r\n    {\r\n    \ttype: 'email',\r\n        name: 'email',\r\n        label: 'Email Address',\r\n        placeholder: 'e.g. frank@thepixies.com',\r\n        help: 'Use a *real* email address',\r\n        required: true\r\n    }\r\n]\r\n````\r\n\r\nWhen you've got your elements, you need to define what buttons you want.\r\n\r\n```` javascript\r\nvar buttons = [\r\n\t{\r\n    \tlabel: 'Sign Up!',\r\n        id: 'submit-btn',\r\n        submit: true,\r\n        type: 'success'\r\n    },\r\n    {\r\n    \tlabel: 'Cancel',\r\n        id: 'cancel-btn',\r\n        type: 'warning'\r\n    }\r\n]\r\n````\r\n\r\nYou don't actually have to define buttons. But buttons are pretty useful for forms. The ID part here is important - if you want to have your buttons do things other than submit, you'll use the ID to hook onto a click event.\r\n\r\nYou can then initiate the form!\r\n\r\n```` javascript\r\n$('#formid').paperPusher({\r\n\telements: elements,\r\n    buttons: buttons,\r\n    prepend: true\r\n});\r\n````\r\n\r\nThat's it!\r\n\r\n## Documentation\r\n\r\n### Paperpusher\r\n\r\n#### elements - *array*\r\nArray of Objects that describe the form's elements. Documentation on an 'element' is below.\r\n#### buttons - *array*\r\nArray of Objects that describe the form's buttons. Documentation on a 'button' is below.\r\n#### prepend - *boolean*\r\n*Default: false*\r\n\r\nWhen True, this will prepend, rather than append, the form's markup to the parent selector.\r\n\r\n### Elements\r\n\r\n#### type - *string, required*\r\nThe type of field element. You can see a list of supported field types by running the command\r\n````javascript\r\n$().paperPusher('types');\r\n````\r\n#### name - *string, required*\r\nThis will be the field element's 'name' and 'id'. When a form is submitted this will be the value's key\r\n#### label - *string*\r\nThis label appears above the field and describes what the field is.\r\n#### placeholder - *string*\r\nThis is an HTML5 placeholder and appears in the field if it is empty. Useful for examples in your form. Only applicable in certain fields - such as text and email, rather than selects.\r\n#### help - *string*\r\nHelp text appears below the field and can be a good place to explain what a user needs to input here.\r\n#### required - *boolean*\r\n*Default: false*\r\n\r\nIf True, this attaches an HTML5 required tag to the element. Also adds a 'Required' label.\r\n#### value - *string*\r\n*Default: null*\r\n\r\nIf not null, this will be the starting value of this field. Will only work on applicable fields, such as text and email, rather than selects.\r\n#### disabled - *boolean*\r\n*Default: false*\r\n\r\nIf True, this will attach an HTML5 'disbaled' tag to the form element to grey it out.\r\n#### options - *array*\r\nOnly applicable to select fields, this is an array of objects that form the options for your select.\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n**options[i].label - *string***\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\nThis should be the text that shows up in the select option. If not present, the label will be equal to the value.\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n**options[i].value - *string, required***\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\nThis is the value of the select option. If there is no specified label, then it will also be the label.\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n**options[i].selected - *boolean***\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n*Default: false*\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\nIf True, this will preselect this option. There should only be one of these True in the Array.\r\n\r\n#### events - *object*\r\nHere you can specify any events to be attached to this element. They should have keys that match valid jQuery events, and the value should be the function to run on that event. It accepts one argument, which is the element that it is attached to. Here's an example:\r\n```` javascript\r\nevents: {\r\n  focus: function(element){\r\n    console.log('You just focussed on '+element.id);\r\n  }\r\n}\r\n````\r\n\r\n### Buttons\r\n\r\n#### label - *string*\r\nThis is the text that shows up in the button\r\n\r\n#### id - *string*\r\nThis is the ID of the button. Take note of this, as you may want to hook onto a click of this button using this ID.\r\n\r\n#### type - *string*\r\n*Default: 'default'*\r\n\r\nThis will be added as a class to the button with the prefix 'btn-'. In Bootstrap this affects the styling of the button, for example currently a button with a class of 'btn-primary' is blue, and 'btn-default' is white. See Bootstrap docs for more.\r\n\r\n#### submit - *boolean*\r\n*Default: false*\r\n\r\nIf True, this will set the button to be a submit button, and will submit the form.\r\n\r\n## License\r\n\r\nPaperpusher is distributed under the MIT License. If you use this utility in a public environment, please attribute and link back to the github repo in your code.\r\n\r\nFor more on the MIT License, look [here](http://choosealicense.com/licenses/mit/).\r\n\r\n## Contributing\r\n\r\nIf you want to extend Paperpusher in any way, please do! If you think your work would be benificial to others, then I'm happy to accept pull requests.\r\n\r\nFor more on pull requests, look [here](http://oss-watch.ac.uk/resources/pullrequest).\r\n","google":"UA-49107725-1","note":"Don't delete this file! It's used internally to help with page regeneration."}